//
    Copyright (C) 2015 whphhg

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version. For more information read the
    complete license in LICENSE.md.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

extends layout
block content
    script.
        /**
         * Extend native String object with .capitalize() function.
         */
        String.prototype.capitalize = function() {
            return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();
        }

        /**
         * Start socket.io on localhost:20123.
         */
        socket = io('http://localhost:20123');

        /**
         * All alerts are fed through here.
         */
        socket.on('alerts', function(text) {
            alert(text);
        });

        /**
         * Update #[span#key] elements with information received from RPC 'getinfo'.
         */
        socket.on('getinfo', function(obj) {
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (key == 'balance') {
                        $('#' + key).text(accounting.formatMoney(obj[key], '', 6, ',', '.'));
                    } else {
                        $('#' + key).text(obj[key]);
                    }
                }
            }

            /**
             * Global variables needed for calculations elsewhere.
             */
            balance = obj['balance'];
            blocks = obj['blocks'];
            moneysupply = obj['moneysupply'];
        });

    div.container-fluid
        div.content
            div.container-fluid
                h5 #[span#version] &nbsp;&nbsp; Protocol: #[span#protocolversion] &nbsp;&nbsp;  Wallet: #[span#walletversion]
                div.row-fluid
                    div.span5
                        h3 BALANCE &nbsp;&nbsp; #[span#balance] &nbsp;&nbsp; &#579;#[span#balance_btc] &nbsp;&nbsp; #[span#balance_local]
                    div.span2.text-center
                        input.btn(type='submit', id='button_complete_history', value='Complete history')
                        script.
                            /**
                             * Show complete history on "button_complete_history" click.
                             */
                            $("#button_complete_history").click(function() {
                                /**
                                 * Call RPC method listsinceblock on the server and return complete history.
                                 */
                                socket.emit('complete_history', true);

                                /**
                                 * Handle clicks between "Complete history" and "Incentive info" buttons to correctly hide and show wallet "windows".
                                 */
                                if (!$("#incentive_window").hasClass('hidden')) {
                                    if ($("#wallet_window").hasClass('hidden') && $("#history_window").hasClass('hidden')) {
                                        $("#incentive_window").addClass('hidden');
                                        $("#history_window").toggleClass('hidden');
                                    }
                                } else {
                                    $("#history_window").toggleClass('hidden');
                                    $("#wallet_window").toggleClass('hidden');
                                }
                            });

                        input.btn(type='submit', id='button_node_incentives', value='Incentive info')
                        script.
                            /**
                             * Show node incentive info on "button_node_incentives" click.
                             */
                            $("#button_node_incentives").click(function() {
                                /**
                                 * Handle clicks between "Complete history" and "Incentive info" buttons to correctly hide and show wallet "windows".
                                 */
                                if (!$("#history_window").hasClass('hidden')) {
                                    if ($("#wallet_window").hasClass('hidden') && $("#incentive_window").hasClass('hidden')) {
                                        $("#history_window").addClass('hidden');
                                        $("#incentive_window").toggleClass('hidden');
                                    }
                                } else {
                                    $("#incentive_window").toggleClass('hidden');
                                    $("#wallet_window").toggleClass('hidden');
                                }
                            });

                    div.span5.text-right
                        h3 &#579;#[span#vnl_btc] &nbsp;&nbsp; #[span#vnl_local] &nbsp;&nbsp #[span#vnl_local_marketcap] MCAP
            div#wallet_window
                div.container-fluid
                    p
                        b Unconfirmed
                        | &nbsp;&nbsp; #[span#unconfirmed] &nbsp;&nbsp;
                        b Staking
                        | &nbsp;&nbsp; #[span#stake] &nbsp;&nbsp;
                        b Immature
                        | &nbsp;&nbsp; #[span#newmint]
                div.container-fluid
                    div.row-fluid
                        div.span4
                            div.row-fluid
                                div.span4
                                    form.form-horizontal(id="form_select_currency")
                                        script.
                                            /**
                                             * Populate local currency dropdown selection menu.
                                             */
                                            socket.on('fixerio', function(obj) {
                                                var html_select = $('<select id="selected_local_currency" class="span5" />');

                                                for (var key in obj) {
                                                    if (obj.hasOwnProperty(key)) {
                                                        $('<option />', {value: obj[key]['name'], text: obj[key]['name']}).appendTo(html_select);
                                                    }
                                                }

                                                html_select.appendTo('#form_select_currency');
                                                $('<input type="submit" value="Set" class="btn">').appendTo('#form_select_currency');
                                            });

                                            socket.on('local_currency', function(obj) {
                                                var currency = obj[0];
                                                var btc_price = obj[1];
                                                var vnl_average = obj[2];
                                                var local_symbol = '';
                                                var local_decimal = '.';
                                                var local_thousand = ',';

                                                /**
                                                 * Set currency local properties.
                                                 *
                                                 * TODO: Finish local decimal/thousand separators for all currencies.
                                                 */
                                                if (currency == 'AUD' || currency == 'CAD' || currency == 'HKD' || currency == 'NZD' || currency == 'SGD' || currency == 'USD') {
                                                    local_symbol = '$';
                                                } else if (currency == 'CNY') {
                                                    local_symbol = '元';
                                                } else if (currency == 'GBP') {
                                                    local_symbol = '£';
                                                } else if (currency == 'ILS') {
                                                    local_symbol = '₪';
                                                } else if (currency == 'INR') {
                                                    local_symbol = '₹';
                                                } else if (currency == 'JPY') {
                                                    local_symbol = '¥';
                                                } else if (currency == 'KRW') {
                                                    local_symbol = '₩';
                                                } else if (currency == 'MXN' || currency == 'PHP') {
                                                    local_symbol = '₱';
                                                } else if (currency == 'THB') {
                                                    local_symbol = '฿';
                                                } else if (currency == 'TRY') {
                                                    local_symbol = '₤';
                                                } else if (currency == 'EUR') {
                                                    local_symbol = '€';
                                                    local_decimal = ',';
                                                    local_thousand = '.';
                                                }

                                                /**
                                                 * Update #[span#key] elements.
                                                 */
                                                $('#vnl_btc').text(accounting.formatMoney(vnl_average, '', 8, ',', '.'));
                                                $('#vnl_local').text(accounting.formatMoney(vnl_average * btc_price, local_symbol, 3, local_thousand, local_decimal) + ' ' + currency);
                                                $('#vnl_local_marketcap').text(accounting.formatMoney(vnl_average * moneysupply * btc_price, local_symbol, 0, local_thousand, local_decimal) + ' ' + currency);
                                                $('#balance_btc').text(accounting.formatMoney(vnl_average * balance, '', 8, ',', '.'));
                                                $('#balance_local').text(accounting.formatMoney(vnl_average * balance * btc_price, local_symbol, 2, local_thousand, local_decimal) + ' ' + currency);
                                            });

                                            /**
                                             * Emit new currency to server.
                                             */
                                            $('#form_select_currency').on('submit', function(e) {
                                                e.preventDefault();
                                                socket.emit('set_local_currency', $('#selected_local_currency').val());
                                            });

                                div.span8
                                    script.
                                        /**
                                         * Initial wallet "lock / unlock / encrypt" (passphrase) check.
                                         */
                                        socket.on('wallet_passphrase_check', function(obj) {
                                            if (obj.hasOwnProperty('error')) {
                                                /**
                                                 * error_code_wallet_wrong_enc_state = -15, wallet not encrypted.
                                                 */
                                                if (obj.error['code'] == -15) {
                                                    $('#wallet_encrypt').toggleClass('hidden');
                                                }
                                                /**
                                                 * error_code_invalid_params = -32602, wallet is encrypted and locked (in this case).
                                                 */
                                                else if (obj.error['code'] == -32602) {
                                                    $('#wallet_lock').addClass('hidden');
                                                    $('#wallet_unlock').toggleClass('hidden');
                                                    $('#sweep_this_private_key').prop('disabled', true);
                                                    $('#transfer_amount').prop('disabled', true);
                                                    $('#transfer_recipient').prop('disabled', true);
                                                    $('#button_transfer').prop('disabled', true);
                                                    $('#button_sweep').prop('disabled', true);
                                                }
                                                /**
                                                 * error_code_wallet_already_unlocked = -17, wallet unlocked.
                                                 */
                                                else if (obj.error['code'] == -17) {
                                                    $('#wallet_unlock').addClass('hidden');
                                                    $('#wallet_lock').toggleClass('hidden');
                                                    $('#sweep_this_private_key').prop('disabled', false);
                                                    $('#transfer_amount').prop('disabled', false);
                                                    $('#transfer_recipient').prop('disabled', false);
                                                }
                                            }
                                        });

                                    div.row-fluid.hidden.text-right#wallet_encrypt
                                        form.form-horizontal(id="form_wallet_encrypt")
                                            input.span9(id="encrypt_key", type="text", placeholder="Wallet is unencrypted.")
                                            input.btn(type="submit", id="button_encrypt", value="Encrypt")
                                            script.
                                                /**
                                                 * Disable the button until input is filled.
                                                 */
                                                $('#button_encrypt').prop('disabled', true);
                                                $('#encrypt_key').keyup(function() {
                                                    $('#button_encrypt').prop('disabled', this.value == "" ? true : false);     
                                                });

                                                /**
                                                 * Emit key on form submit.
                                                 */
                                                $('#form_wallet_encrypt').on('submit', function(e) {
                                                    e.preventDefault();
                                                    socket.emit('encryptwallet', $('#encrypt_key').val());
                                                    $('#wallet_encrypt').toggleClass('hidden');
                                                });

                                    div.row-fluid.hidden.text-right#wallet_unlock
                                        form.form-horizontal(id="form_wallet_unlock")
                                            input.span9(id="unlock_key", type="text", placeholder="Wallet is locked.")
                                            input.btn(type="submit", id="button_unlock", value="Unlock")
                                            script.
                                                /**
                                                 * Disable the button until input is filled.
                                                 */
                                                $('#button_unlock').prop('disabled', true);
                                                $('#unlock_key').keyup(function() {
                                                    $('#button_unlock').prop('disabled', this.value == "" ? true : false);     
                                                });

                                                /**
                                                 * Emit key on form submit.
                                                 */
                                                $('#form_wallet_unlock').on('submit', function(e) {
                                                    e.preventDefault();
                                                    socket.emit('walletpassphrase', $('#unlock_key').val());
                                                });

                                    div.row-fluid.hidden.text-right#wallet_lock
                                        input.span11.btn(type='submit', id='button_lock', value='Lock the wallet')
                                        script.
                                            /**
                                             * On "button_lock" click call RPC method walletlock on the server.
                                             */
                                            $("#button_lock").click(function(){
                                                socket.emit('walletlock', true);
                                            });

                            div.row-fluid
                                div.span6
                                    h4 ADDRESSES
                                div.span6.text-right
                                    input.btn(type='submit', id='button_new_address', value='New')
                                    script.
                                        /**
                                         * On "button_new_address" click call RPC method getnewaddress on the server.
                                         */
                                        $("#button_new_address").click(function(){
                                            socket.emit('getnewaddress', true);
                                        }); 

                                        /**
                                         * List all wallet addresses including empty ones.
                                         */
                                        socket.on('listreceivedbyaddress', function(obj) {
                                            $('#table_wallet_addresses').empty();

                                            var html_table = $('<table class="table table-striped"><thead><tr><th>Address</th><th>Confirmations</th><th>Received</th></tr></thead></table>');
                                            var address = '';

                                            for (key in obj) {
                                                if (obj[key]['confirmations'] > 0) {
                                                    address = '<a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'] + '</a>';
                                                } else {
                                                    address = obj[key]['address'];
                                                }

                                                html_table.append('<tr><td>' + address + '</td><td>' + obj[key]['confirmations'] + '</td><td>' + obj[key]['amount'] + '</td></tr>');
                                            }

                                            $('#table_wallet_addresses').append(html_table);
                                        });

                            .row-fluid #[span#table_wallet_addresses]
                            div.text-right
                                form.form-horizontal(id="form_sweep_private_key")
                                    input.span10(id="sweep_this_private_key", type="text", placeholder="Sweep a valid private key")
                                    input.btn(type="submit", id="button_sweep", value="Sweep")

                                    script.
                                        /**
                                         * Disable the button until input is filled.
                                         */
                                        $('#button_sweep').prop('disabled', true);
                                        $('#sweep_this_private_key').keyup(function() {
                                            $('#button_sweep').prop('disabled', this.value == "" ? true : false);     
                                        });

                                        /**
                                         * Emit "sweep_this_private_key" on submit.
                                         */
                                        $('#form_sweep_private_key').on('submit', function(e) {
                                            e.preventDefault();

                                           /**
                                            * Disable the button again to prevent multiple submissions (it takes a few seconds to get a response from the wallet).
                                            */
                                            $('#button_sweep').prop('disabled', true);

                                            /**
                                             * Enable the button after 6 seconds, this (should) give enough time for the wallet to respond.
                                             */
                                            setTimeout(function() {
                                                 $('#button_sweep').prop('disabled', false);
                                            }, 6000);

                                            /**
                                             * Call RPC method importprivkey on the server.
                                             */
                                            socket.emit('importprivkey', $('#sweep_this_private_key').val());
                                        });

                            h4 WATCH ONLY ADDRESSES
                            script.
                                /**
                                 * List all watch addresses saved in config.json.
                                 */
                                socket.on('watchaddresses', function(obj) {
                                    $('#table_watch_addresses').empty();
                                    var html_table = $('<table class="table table-striped"><thead><tr><th>Address</th><th>Title</th><th>Balance</th></tr></thead></table>');

                                    for (key in obj) {
                                        html_table.append('<tr><td><a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'] + '</a></td><td>' + obj[key]['title'] + '</td><td>' + obj[key]['balance'] + '</td></tr>');
                                    }

                                    $('#table_watch_addresses').append(html_table);
                                });

                            .row-fluid #[span#table_watch_addresses]                            
                            div.row-fluid
                                div.text-right
                                    form.form-horizontal(id="form_add_watch_address")
                                        input.span3(id="watch_address_title", type="text", placeholder="Title")
                                        input.span7(id="watch_address", type="text", placeholder="A valid address")
                                        input.btn(type="submit", id="button_add_watch_address", value="Add")
                                        script.
                                            /**
                                             * Disable the button until inputs are filled.
                                             */
                                            $('#button_add_watch_address').prop('disabled', true);
                                            $('#form_add_watch_address input').keyup(function() {
                                                var inputs_empty = false;

                                                $('#form_add_watch_address input').each(function() {
                                                    if ($(this).val().length == 0) {
                                                        inputs_empty = true;
                                                    }
                                                });

                                                if (inputs_empty) {
                                                    $('#button_add_watch_address').prop('disabled', true);
                                                } else {
                                                    $('#button_add_watch_address').prop('disabled', false);
                                                }
                                            });

                                            /**
                                             * Emit new watch address.
                                             */
                                            $('#form_add_watch_address').on('submit', function(e) {
                                                e.preventDefault();
                                                socket.emit('addwatchaddress', [$('#watch_address').val(), $('#watch_address_title').val()]);
                                            });

                        div.span4
                            div.row-fluid
                                div.span1
                                    h4 TRANSFER
                                div.span11.text-right
                                    form.form-horizontal(id="form_transfer")
                                        input.span2(id="transfer_amount", type="text", placeholder="Amount")
                                        input.span7(id="transfer_recipient", type="text", placeholder="A valid address")
                                        input.btn(type="submit", id="button_transfer", value="Send")
                                    script.
                                        /**
                                         * Disable the button until inputs are filled.
                                         */
                                        $('#button_transfer').prop('disabled', true);
                                        $('#form_transfer input').keyup(function() {
                                            var inputs_empty = false;

                                            $('#form_transfer input').each(function() {
                                                if ($(this).val().length == 0) {
                                                    inputs_empty = true;
                                                }
                                            });

                                            if (inputs_empty) {
                                                $('#button_transfer').prop('disabled', true);
                                            } else {
                                                $('#button_transfer').prop('disabled', false);
                                            }
                                        });

                                        /**
                                         * Emit new watch address.
                                         */
                                        $('#form_transfer').on('submit', function(e) {
                                            e.preventDefault();
                                            socket.emit('validateaddress', [$('#transfer_recipient').val(), $('#transfer_amount').val()]);
                                        });

                                        /**
                                         * If valid ask user to confirm transfer and then sendtoaddress, else do nothing.
                                         */
                                        socket.on('transfer_possible', function(obj) {
                                            var address = obj[0];
                                            var amount = obj[1]

                                            if (confirm("Recipient: " + address + "\nAmount: " + amount + "\n\nAre you sure you want to transfer the coins?") == true) {
                                                socket.emit('sendtoaddress', [address, amount]);
                                            }
                                        });

                            div.row-fluid
                                h4 HISTORY
                                script.
                                    /**
                                     * List last 10 transactions.
                                     */
                                    socket.on('listtransactions', function(obj) {
                                        $('#table_history').empty();

                                        var html_table = $('<table class="table table-striped"><thead><tr><th>Time</th><th>Address</th><th>Category</th><th>Amount</th></tr></thead></table>');
                                        var unconfirmed = 0;

                                        for (key in obj) {
                                            /**
                                             * Convert ['time'] field to miliseconds.
                                             */
                                            var time = new Date(obj[key]['time'] * 1000);
                                            html_table.append('<tr><td>' + time.toLocaleDateString() + ' ' + time.toLocaleTimeString() + '</td><td><a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'].substring(0, 20) + '...</a></td><td>' + obj[key]['category'] + '</td><td>' + obj[key]['amount'] + '</td></tr>');

                                            /**
                                             * Count all unconfirmed transactions.
                                             */
                                            if (obj[key]['confirmations'] == 0 && obj[key]['amount'] > 0 ) {
                                                unconfirmed += obj[key]['amount'];
                                            }
                                        }

                                        $('#table_history').append(html_table);
                                        $('#unconfirmed').text(unconfirmed);
                                    });

                            .row-fluid #[span#table_history]
                        div.span4
                            h4 POLONIEX TRADE HISTORY
                            script.
                                /**
                                 * List last 200 trades from Poloniex.
                                 */
                                socket.on('poloniextradehistory', function(obj) {
                                    $('#trade_history_poloniex').empty();

                                    var html_table = $('<table class="table table-striped"><thead><tr><th>Date</th><th>Type</th><th>Price (BTC)</th><th>Amount (VNL)</th><th>Total (BTC)</th></tr></thead></table>');

                                    for (key in obj) {
                                        html_table.append('<tr><td>' + obj[key]['date'] + '</td><td class="' + obj[key]['type'].capitalize() + '">' + obj[key]['type'].capitalize() + '</td><td>' + obj[key]['rate'] + '</td><td>' + obj[key]['amount'] + '</td><td>' + obj[key]['total'] + '</td></tr>');
                                    }

                                    $('#trade_history_poloniex').append(html_table);
                                });

                            .row-fluid.tradehistory #[span#trade_history_poloniex]
                            p &nbsp;
                            h4 BITTREX TRADE HISTORY
                            script.
                                /**
                                 * List last 50 trades from Bittrex.
                                 */
                                socket.on('bittrextradehistory', function(obj) {
                                    $('#trade_history_bittrex').empty();
                                    var html_table = $('<table class="table table-striped"><thead><tr><th>Date</th><th>Type</th><th>Price (BTC)</th><th>Amount (VNL)</th><th>Total (BTC)</th></tr></thead></table>');

                                    for (key in obj) {
                                        html_table.append('<tr><td>' + obj[key]['TimeStamp'].replace('T',' ').split('.')[0] + '</td><td class="' + obj[key]['OrderType'].capitalize() + '">' + obj[key]['OrderType'].capitalize() + '</td><td>' + obj[key]['Price'].toFixed(8) + '</td><td>' + obj[key]['Quantity'].toFixed(8) + '</td><td>' + obj[key]['Total'].toFixed(8) + '</td></tr>');
                                    }

                                    $('#trade_history_bittrex').append(html_table);
                                });

                            .row-fluid.tradehistory #[span#trade_history_bittrex]
            div.hidden#history_window
                div.container-fluid
                    h4 COMPLETE HISTORY
                    script.
                        /**
                         * List complete history.
                         */
                        socket.on('listsinceblock', function(obj) {
                            $('#table_complete_history').empty();
                            var html_table = $('<table class="table table-striped"><thead><tr><th>Address</th><th>Category</th><th>Amount</th><th>Conf.</th><th>Block hash</th><th>Bi</th><th>Block time</th><th>txid</th><th>Time</th></tr></thead></table>');

                            for (key in obj) {
                                /**
                                 * Check if tx has been included in a block.
                                 */
                                if (obj[key].hasOwnProperty('blockhash')) {
                                    blockhash = '<a href="https://blockchain.vanillacoin.net/block/' + obj[key]['blockhash'] + '" target="_blank">' + obj[key]['blockhash'].substring(0, 50) + '...</a>';

                                    /**
                                     * If it's zerotime.. :)
                                     */
                                    if (obj[key]['blockhash'] == "0000000000000000000000000000000000000000000000000000000000000000") {
                                        blockhash = '-----';
                                    }
                                } else {
                                    blockhash = '-----';
                                }

                                /**
                                 * Check if tx has been included in a block.
                                 */
                                if (obj[key].hasOwnProperty('blocktime')) {
                                    if (obj[key]['blocktime'] != -1) {
                                        /**
                                         * Convert ['blocktime'] to miliseconds.
                                         */
                                        blocktime = new Date(obj[key]['blocktime'] * 1000);
                                        blocktime = blocktime.toLocaleDateString() + ' ' + blocktime.toLocaleTimeString();
                                    } else {
                                        blocktime = '-----';
                                    }
                                } else {
                                    blocktime = '-----';
                                }

                                /**
                                 * Check if tx has been included in a block.
                                 */
                                if (obj[key].hasOwnProperty('blockindex')) {
                                    if (obj[key]['blockindex'] != -1) {
                                        blockindex = obj[key]['blockindex'];
                                    } else {
                                        blockindex = '-----';
                                    }
                                } else {
                                    blockindex = '-----';
                                }

                                /**
                                 * Convert ['timereceived'] to miliseconds.
                                 */
                                var timereceived = new Date(obj[key]['timereceived'] * 1000);

                                html_table.append('<tr><td><a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'] + '</a></td><td>' + obj[key]['category'] + '</td><td>' + obj[key]['amount'] + '</td><td>' + obj[key]['confirmations'] + '</td><td>' + blockhash + '</td><td>' + blockindex + '</td><td>' + blocktime + '</td><td><a href="https://blockchain.vanillacoin.net/tx/' + obj[key]['txid'] + '" target="_blank">' + obj[key]['txid'].substring(0, 50) + '...</a></td><td>' + timereceived.toLocaleDateString() + ' ' + timereceived.toLocaleTimeString() + '</td></tr>');
                            }

                            $('#table_complete_history').append(html_table);
                        });

                    .row-fluid #[span#table_complete_history]
            div.hidden#incentive_window
                div.container-fluid
                    script.
                        /**
                         * Update UDP connections.
                         */
                        socket.on('udp_connections', function(obj) {
                            $('#udp_connections').text(obj);
                        });

                        /**
                         * Update with information received from RPC method 'getincentiveinfo'.
                         */
                        socket.on('getincentiveinfo', function(obj) {
                            /**
                             * Update #[span#key] elements.
                             */
                            for (var key in obj) {
                                if (obj.hasOwnProperty(key)) {
                                    $("#" + key).text(obj[key]);
                                }
                            }
                        });

                    div.row-fluid
                        div.span3
                        div.span2
                            p Blocks: #[span#blocks]
                            p Difficulty: #[span#difficulty]
                            p Coin supply: #[span#moneysupply]
                        div.span2
                            p Collateral: #[span#collateralbalance]/#[span#collateralrequired]
                            p Vote candidate: #[span#votecandidate]
                            p Vote score: #[span#votescore]
                        div.span3
                            p #[span#ip]:#[span#port] (#[span#networkstatus])
                            p TCP #[span#connections] &nbsp&nbsp; UDP #[span#udp_connections]
                            p Transaction fee: #[span#paytxfee]
                    h4 INCENTIVE INFO
                    div.row-fluid
                        div.span4
                            h4 TODO: SHOW LATEST REWARDS
                            div.row-fluid
                                div.span8
                                    h4 #[span#estimate_blocktime]
                                div.span4.text-right
                                    form.form-horizontal(id="form_estimate_blocktime")
                                        input.span5(id="block_number", type="text", placeholder="Block #")
                                        input.btn(type="submit", value="Calculate")
                                        script.
                                            $('#estimate_blocktime').text('ESTIMATE BLOCK TIME');
                                            $('#form_estimate_blocktime').on('submit', function(e) {
                                                e.preventDefault();

                                                var time_per_block = 111;
                                                var future_block = $('#block_number').val();
                                                var estimate = new Date();

                                                if (future_block - blocks > 0) {
                                                    estimate.setSeconds(estimate.getSeconds() + (future_block - blocks) * time_per_block);

                                                    /**
                                                     * Calculate %.
                                                     */
                                                    socket.emit('calculate_percentage', (future_block / 100).toFixed(0) + '00');

                                                    /**
                                                     * Update text with % and estimated time.
                                                     */
                                                    socket.on('return_percentage', function(obj) {
                                                        $("#estimate_blocktime").text(obj.trim() + '% EST. ON ' + estimate.toLocaleDateString() + ' ' + estimate.toLocaleTimeString());
                                                    });

                                                    /**
                                                     * Reset text after 1 minute.
                                                     */
                                                    setTimeout(function() {
                                                        $('#estimate_blocktime').text('ESTIMATE BLOCK TIME');
                                                    }, 60000);
                                                } else {
                                                    $('#estimate_blocktime').text('BLOCK ALREADY SUBMITTED');
                                                    setTimeout(function() {
                                                        $('#estimate_blocktime').text('ESTIMATE BLOCK TIME');
                                                    }, 1100);
                                                }
                                            });
                        div.span8
                            h4 TODO: Graph displaying rewards per day