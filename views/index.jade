//
    Copyright (C) 2015 whphhg

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version. For more information read the
    complete license in LICENSE.md.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

extends layout
block content
    script.
        /**
         * Start socket.io on localhost:20123
         */
        socket = io('http://localhost:20123');

        /**
         * All alerts are fed through here
         */
        socket.on('alerts', function(text) {
            alert(text);
        });

        /**
         * Globals
         */
        moneysupply = 0;
        local_currency = ['', 0, 0];

        /**
         * Update #[span#key] elements with information received from RPC 'getinfo'
         */
        socket.on('getinfo', function(obj) {
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (key == 'balance') {
                        $('#' + key).text(accounting.formatMoney(obj[key], '', 6, ',', '.'));
                    } else {
                        $('#' + key).text(obj[key]);
                    }
                }
            }

            /**
             * Global variables needed for calculations elsewhere
             */
            balance = obj['balance'];
            blocks = obj['blocks'];
            moneysupply = obj['moneysupply'];

            /**
             * Set placeholder text for block time estimation calculator
             */
            $('#input_estimate_blocktime').attr("placeholder", blocks);
        });

    .container-fluid
        .row-fluid
            .span1
            .span10
                .row-fluid
                    .span5
                        h3 BALANCE &nbsp;&nbsp; #[span#balance] &nbsp;&nbsp; &#579;#[span#balance_btc] &nbsp;&nbsp; #[span#balance_local]
                    .span2.text-center#icon
                        a(href='http://vanillacoin.net', target='_blank')
                            img(src='icon.png')
                    .span5.text-right
                        h3 &#579;#[span#vnl_btc] &nbsp;&nbsp; #[span#vnl_local] &nbsp;&nbsp #[span#vnl_local_marketcap] MCAP
                .row-fluid
                    .span4
                        b Unconfirmed
                        | &nbsp;&nbsp; #[span#unconfirmed] &nbsp;&nbsp;
                        b Staking
                        | &nbsp;&nbsp; #[span#stake] &nbsp;&nbsp;
                        b Immature
                        | &nbsp;&nbsp; #[span#newmint]
                    .span4.text-center
                        #convert_currency.hidden
                            p
                                b #[span#convert_to_left]
                                |  #[span#convert_to_left_name] &nbsp;&nbsp;
                                b #[span#convert_to_right]
                                |  #[span#convert_to_right_name]
                    .span4.text-right
                        b #[span#version] &nbsp;&nbsp; Protocol: 
                        | #[span#protocolversion]
                        b &nbsp;&nbsp; Wallet: 
                        | #[span#walletversion]
                .row-fluid
                    .span4
                        script.
                            /**
                             * Initial wallet "lock / unlock / encrypt" (passphrase) check
                             */
                            socket.on('wallet_passphrase_check', function(res) {
                                /**
                                 * error_code_wallet_wrong_enc_state = -15, wallet not encrypted
                                 */
                                if (res.code == -15) {
                                    /**
                                     * Show encryption form
                                     */
                                    $('#wallet_encrypt').toggleClass('hidden');
                                }
                                /**
                                 * error_code_invalid_params = -32602, wallet is encrypted and locked (in this case)
                                 */
                                else if (res.code == -32602) {
                                    /**
                                     * Hide locking form and show unlocking form
                                     */
                                    $('#wallet_lock').addClass('hidden');
                                    $('#wallet_unlock').toggleClass('hidden');

                                    /**
                                     * Disable input fields of forms that require the wallet to be unlocked
                                     */
                                    $('#input_sweep_private_key').prop('disabled', true);
                                    $('#input_dump_private_key').prop('disabled', true);
                                    $('#input_transfer_amount').prop('disabled', true);
                                    $('#input_transfer_recipient').prop('disabled', true);
                                }
                                /**
                                 * error_code_wallet_already_unlocked = -17, wallet unlocked
                                 */
                                else if (res.code == -17) {
                                    /**
                                     * Hide unlocking form and show locking form
                                     */
                                    $('#wallet_unlock').addClass('hidden');
                                    $('#wallet_lock').toggleClass('hidden');

                                    /**
                                     * Enable input fields of forms that require the wallet to be unlocked
                                     */
                                    $('#input_sweep_private_key').prop('disabled', false);
                                    $('#input_dump_private_key').prop('disabled', false);
                                    $('#input_transfer_amount').prop('disabled', false);
                                    $('#input_transfer_recipient').prop('disabled', false);
                                }
                            });

                        #wallet_encrypt.hidden
                            form.form-horizontal(id="form_wallet_encrypt")
                                input.span9(id="input_encryption_key", type="text", placeholder="Wallet is unencrypted")
                                input.btn(type="submit", id="button_wallet_encrypt", value="Encrypt")
                                script.
                                    /**
                                     * Disable the button until input is filled
                                     */
                                    $('#button_wallet_encrypt').prop('disabled', true);
                                    $('#input_encryption_key').keyup(function() {
                                        $('#button_wallet_encrypt').prop('disabled', this.value == "" ? true : false);     
                                    });

                                    /**
                                     * Emit key on form submit
                                     */
                                    $('#form_wallet_encrypt').on('submit', function(e) {
                                        e.preventDefault();
                                        socket.emit('encryptwallet', $('#input_encryption_key').val());
                                        $('#wallet_encrypt').toggleClass('hidden');
                                    });

                        #wallet_unlock.hidden
                            form.form-horizontal(id="form_wallet_unlock")
                                input.span9(id="input_wallet_passphrase", type="text", placeholder="Wallet is locked! Enter passphrase to unlock")
                                input.btn(type="submit", id="button_wallet_unlock", value="Unlock")
                                script.
                                    /**
                                     * Disable the button until input is filled
                                     */
                                    $('#button_wallet_unlock').prop('disabled', true);
                                    $('#input_wallet_passphrase').keyup(function() {
                                        $('#button_wallet_unlock').prop('disabled', this.value == "" ? true : false);     
                                    });

                                    /**
                                     * Emit key on form submit
                                     */
                                    $('#form_wallet_unlock').on('submit', function(e) {
                                        e.preventDefault();
                                        socket.emit('walletpassphrase', $('#input_wallet_passphrase').val());
                                    });

                        #wallet_lock.hidden
                            input.span9.btn(type='submit', id='button_wallet_lock', value='Lock the wallet')
                            script.
                                /**
                                 * On "button_wallet_lock" click call RPC method walletlock on the server
                                 */
                                $("#button_wallet_lock").click(function(){
                                    socket.emit('walletlock', true);
                                });

                    .span4.text-center
                        form.form-horizontal(id="form_convert_currency")
                            input.span3(id="input_convert_amount", type="text", placeholder="Amount")
                            select.span2.form-control(id="select_converting_currency")
                                option(value='VNL') VNL
                                option(value='BTC') BTC
                                option(value='LOCAL') LOCAL
                        script.
                            $('#form_convert_currency').on('submit', function(e) {
                                e.preventDefault();
                            });

                            /**
                             * Allow only backspace, delete, left arrow, right arrow, period, enter, 0-9, numpad 0-9
                             */
                            $("#input_convert_amount").keydown(function(e) {
                                if (!(e.keyCode == 46 || e.keyCode == 8 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 190 || e.keyCode == 13 || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
                                    e.preventDefault();
                                }
                            });

                            /**
                             * Calculate and update values during input
                             */
                            $('#input_convert_amount').keyup(function() {
                                if ($('#convert_currency').hasClass('hidden')) {
                                    $("#convert_currency").toggleClass('hidden');
                                }

                                /**
                                 * Hide conversion info if input empty
                                 */ 
                                if ($('#input_convert_amount').val() == '') {
                                    $("#convert_currency").toggleClass('hidden');
                                }

                                var local_params = local_currency_params(local_currency[0]);

                                /**
                                 * Hide conversion info on currency switch and clear input field
                                 */
                                $('#select_converting_currency').change(function() {
                                    if (!$('#convert_currency').hasClass('hidden')) {
                                        $("#convert_currency").toggleClass('hidden');
                                    }

                                    $('#input_convert_amount').val('');
                                });

                                if ($('#select_converting_currency').val() == 'VNL') {
                                    /**
                                     * Update convert to BTC values
                                     */
                                    $('#convert_to_left').text(accounting.formatMoney($('#input_convert_amount').val() * local_currency[2], 'Ƀ', 8, ',', '.'));
                                    $('#convert_to_left_name').text('BTC');

                                    /**
                                     * Update convert to LOCAL values
                                     */
                                    $('#convert_to_right').text(accounting.formatMoney($('#input_convert_amount').val() * local_currency[1] * local_currency[2], local_params['symbol'], 3, local_params['thousand'], local_params['decimal']));
                                    $('#convert_to_right_name').text(local_currency[0]);
                                } else if ($('#select_converting_currency').val() == 'BTC') {
                                    /**
                                     * Update convert to VNL values
                                     */
                                    $('#convert_to_left').text(accounting.formatMoney($('#input_convert_amount').val() / local_currency[2], '', 6, ',', '.'));
                                    $('#convert_to_left_name').text('VNL');

                                    /**
                                     * Update convert to LOCAL values
                                     */
                                    $('#convert_to_right').text(accounting.formatMoney($('#input_convert_amount').val() * local_currency[1], local_params['symbol'], 3, local_params['thousand'], local_params['decimal']));
                                    $('#convert_to_right_name').text(local_currency[0]);
                                } else {
                                    /**
                                     * Update convert to VNL values
                                     */
                                    $('#convert_to_left').text(accounting.formatMoney((1 / local_currency[1] * $('#input_convert_amount').val()) / local_currency[2], '', 6, ',', '.'));
                                    $('#convert_to_left_name').text('VNL');

                                    /**
                                     * Update convert to BTC values
                                     */
                                    $('#convert_to_right').text(accounting.formatMoney(1 / local_currency[1] * $('#input_convert_amount').val(), 'Ƀ', 8, ',', '.'));
                                    $('#convert_to_right_name').text('BTC');
                                }
                            });

                    .span4.text-right
                        form.form-horizontal(id="form_toolbar")
                            input.btn(type='button', id='button_node_incentives', value='Incentive info')
                            input.btn.button_margin_left_right(type='button', id='button_maintenance', value='Maintenance')
                            script.
                                /**
                                 * Handle clicks between "Incentive info" and "Maintenance" buttons to correctly hide and show wallet "windows"
                                 */
                                $("#button_node_incentives").click(function() {
                                    if (!$("#maintenance_window").hasClass('hidden')) {
                                        if ($("#wallet_window").hasClass('hidden') && $("#incentive_window").hasClass('hidden')) {
                                            $("#maintenance_window").addClass('hidden');
                                            $("#incentive_window").toggleClass('hidden');
                                        }
                                    } else {
                                        $("#incentive_window").toggleClass('hidden');
                                        $("#wallet_window").toggleClass('hidden');
                                    }

                                    /**
                                     * Resize the map on "Incentive info" click
                                     */
                                    peers_map.invalidateSize();
                                });

                                /**
                                 * Handle clicks between "Maintenance" and "Incentive info" buttons to correctly hide and show wallet "windows"
                                 */
                                $("#button_maintenance").click(function() {
                                    if (!$("#incentive_window").hasClass('hidden')) {
                                        if ($("#wallet_window").hasClass('hidden') && $("#maintenance_window").hasClass('hidden')) {
                                            $("#incentive_window").addClass('hidden');
                                            $("#maintenance_window").toggleClass('hidden');
                                        }
                                    } else {
                                        $("#maintenance_window").toggleClass('hidden');
                                        $("#wallet_window").toggleClass('hidden');
                                    }
                                });

                                /**
                                 * Populate local currency dropdown selection menu
                                 */
                                socket.on('fixerio', function(obj) {
                                    var html_select = $('<select id="select_local_currency" class="span2" />');

                                    for (var key in obj) {
                                        if (obj.hasOwnProperty(key)) {
                                            $('<option />', {value: obj[key]['name'], text: obj[key]['name']}).appendTo(html_select);
                                        }
                                    }

                                    html_select.appendTo('#form_toolbar');

                                    /**
                                     * Emit new currency to server
                                     */
                                    $('#select_local_currency').change(function() {
                                        socket.emit('set_local_currency', $('#select_local_currency').val());
                                    });
                                });

                                /**
                                 * Return currency local properties
                                 *
                                 * TODO: Finish local decimal/thousand separators for all currencies
                                 */
                                function local_currency_params(currency) {
                                    var local_symbol = '';
                                    var local_decimal = '.';
                                    var local_thousand = ',';

                                    if (currency == 'AUD' || currency == 'CAD' || currency == 'HKD' || currency == 'NZD' || currency == 'SGD' || currency == 'USD') {
                                        local_symbol = '$';
                                    } else if (currency == 'CNY') {
                                        local_symbol = '元';
                                    } else if (currency == 'GBP') {
                                        local_symbol = '£';
                                    } else if (currency == 'ILS') {
                                        local_symbol = '₪';
                                    } else if (currency == 'INR') {
                                        local_symbol = '₹';
                                    } else if (currency == 'JPY') {
                                        local_symbol = '¥';
                                    } else if (currency == 'KRW') {
                                        local_symbol = '₩';
                                    } else if (currency == 'MXN' || currency == 'PHP') {
                                        local_symbol = '₱';
                                    } else if (currency == 'THB') {
                                        local_symbol = '฿';
                                    } else if (currency == 'TRY') {
                                        local_symbol = '₤';
                                    } else if (currency == 'EUR') {
                                        local_symbol = '€';
                                        local_decimal = ',';
                                        local_thousand = '.';
                                    }

                                    return {"symbol":local_symbol, "decimal":local_decimal, "thousand":local_thousand};
                                }

                                socket.on('local_currency', function(obj) {
                                    var currency = obj[0];
                                    var btc_price = obj[1];
                                    var vnl_average = obj[2];
                                    var local_params = local_currency_params(currency);
                                        local_currency = obj;

                                    /**
                                     * Update #[span#key] elements
                                     */
                                    $('#vnl_btc').text(accounting.formatMoney(vnl_average, '', 8, ',', '.'));
                                    $('#vnl_local').text(accounting.formatMoney(vnl_average * btc_price, local_params['symbol'], 3, local_params['thousand'], local_params['decimal']) + ' ' + currency);
                                    $('#vnl_local_marketcap').text(accounting.formatMoney(vnl_average * moneysupply * btc_price, local_params['symbol'], 0, local_params['thousand'], local_params['decimal']) + ' ' + currency);
                                    $('#balance_btc').text(accounting.formatMoney(vnl_average * balance, '', 8, ',', '.'));
                                    $('#balance_local').text(accounting.formatMoney(vnl_average * balance * btc_price, local_params['symbol'], 2, local_params['thousand'], local_params['decimal']) + ' ' + currency);

                                    /**
                                     * Update conversion form LOCAL option with local currency & select current currency
                                     */
                                    $('#select_converting_currency option[value="LOCAL"]').text(currency);
                                    $('#select_local_currency option[value=' + currency + ']').prop('selected', true);
                                });
                hr
                #wallet_window
                    .row-fluid
                        .span6
                            .row-fluid
                                .span2
                                    h4 TRANSACTIONS
                                .span10.text-right
                                    form.form-horizontal(id="form_transfer")
                                        input.span2(id="input_transfer_amount", type="text", placeholder="Amount")
                                        input.span6(id="input_transfer_recipient", type="text", placeholder="A valid address")
                                        input.btn(type="submit", id="button_transfer", value="Send")
                                        input.btn.button_margin_left(type="button", id="button_transfer_add_recipient", value="+")
                                    script.
                                        /**
                                         * Disable the button until inputs are filled
                                         */
                                        $('#button_transfer').prop('disabled', true);
                                        $('#form_transfer input').keyup(function() {
                                            var inputs_empty = false;

                                            $('#form_transfer input').each(function() {
                                                if ($(this).val().length == 0) {
                                                    inputs_empty = true;
                                                }
                                            });

                                            if (inputs_empty) {
                                                $('#button_transfer').prop('disabled', true);
                                            } else {
                                                $('#button_transfer').prop('disabled', false);
                                            }
                                        });

                                        /**
                                         * Emit new watch address
                                         */
                                        $('#form_transfer').on('submit', function(e) {
                                            e.preventDefault();
                                            socket.emit('validateaddress', [$('#input_transfer_recipient').val(), $('#input_transfer_amount').val()]);
                                        });

                                        /**
                                         * If valid ask user to confirm transfer and then sendtoaddress, else do nothing
                                         */
                                        socket.on('transfer_possible', function(obj) {
                                            var address = obj[0];
                                            var amount = obj[1]

                                            if (confirm("Recipient: " + address + "\nAmount: " + amount + "\n\nAre you sure you want to transfer the coins?") == true) {
                                                socket.emit('sendtoaddress', [address, amount]);
                                            }
                                        });
                            script.
                                /**
                                 * List complete history
                                 */
                                socket.on('listsinceblock', function(obj) {
                                    $('#table_complete_history').empty();
                                    $('#graph_timeseries').empty();
                                    $('#graph_rewards_monthly').empty();

                                    var html_table = $('<table class="table table-striped"><thead><tr><th>Time</th><th>Address</th><th>Category</th><th>Amount</th><th></th><th>Conf.</th><th>Block hash</th><th>txid</th></tr></thead></table>');
                                    var unconfirmed = 0;
                                    var local_params = local_currency_params(local_currency[0]);
                                    var rewards_spread = [];
                                    var rewards_current_month = [];
                                    var month = new Date().getMonth() + 1;
                                    var year = new Date().getFullYear();

                                    /**
                                     * Prepare empty array with days of the month
                                     */
                                    for (var i = 1; i <= new Date(year, month, 0).getDate(); i++) {
                                        if (i < 10) {
                                            prefix = '0';
                                        } else {
                                            prefix = '';
                                        }

                                        rewards_current_month.push({'date':month + '-' + prefix + i, 'rewards':0});
                                    }

                                    /**
                                     * Sort transactions DESC
                                     */
                                    obj.sort(function(a,b) { return new Date(b.timereceived).getTime() - new Date(a.timereceived).getTime()});

                                    for (key in obj) {
                                        /**
                                         * Check if tx has been included in a block
                                         */
                                        if (obj[key].hasOwnProperty('blockhash')) {
                                            blockhash = '<a href="https://blockchain.vanillacoin.net/block/' + obj[key]['blockhash'] + '" target="_blank">' + obj[key]['blockhash'].substring(0, 10) + '</a>';

                                            /**
                                             * If it's zerotime.. :)
                                             */
                                            if (obj[key]['blockhash'] == "0000000000000000000000000000000000000000000000000000000000000000") {
                                                blockhash = '----------';
                                            }
                                        } else {
                                            blockhash = '----------';
                                        }

                                        /**
                                         * Count all unconfirmed transactions
                                         */
                                        if (obj[key]['confirmations'] == 0 && obj[key]['amount'] > 0 ) {
                                            unconfirmed += obj[key]['amount'];
                                        }

                                        /**
                                         * Fill with super-peer rewards (generate)
                                         */
                                        if (obj[key]['category'] == 'generate') {
                                            var month_generated = new Date(obj[key]['timereceived'] * 1000).getMonth() + 1;
                                            var day_generated = new Date(obj[key]['timereceived'] * 1000).getDate().toString();

                                            if (month_generated == month) {
                                                rewards_current_month[day_generated - 1]['rewards'] += 1;
                                            }

                                            rewards_spread.push({"value":obj[key]['timereceived'] * 1000});
                                        }

                                        /**
                                         * Convert ['timereceived'] to miliseconds
                                         */
                                        var timereceived = new Date(obj[key]['timereceived'] * 1000);

                                        html_table.append('<tr><td>' + timereceived.toLocaleDateString() + ' ' + timereceived.toLocaleTimeString() + '</td><td><a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'].substring(0,10) + '</a></td><td>' + obj[key]['category'] + '</td><td>' + obj[key]['amount'] + '</td><td>' + accounting.formatMoney(obj[key]['amount'] * local_currency[1] * local_currency[2], local_params['symbol'], 2, local_params['thousand'], local_params['decimal']) + ' ' + local_currency[0] + '</td><td>' + obj[key]['confirmations'] + '</td><td>' + blockhash + '</td><td><a href="https://blockchain.vanillacoin.net/tx/' + obj[key]['txid'] + '" target="_blank">' + obj[key]['txid'].substring(0, 5) + '</a></td></tr>');
                                    }

                                    /**
                                     * Create reward spread and rewards per day graphs
                                     */
                                    timeseries('#graph_timeseries', rewards_spread, false);
                                    rewards_per_day('#graph_rewards_monthly', rewards_current_month);

                                    if (rewards_spread.length < 1 && !$('#incentive_window_graphs').hasClass('hidden')) {
                                        $('#incentive_window_graphs').toggleClass('hidden');
                                    }

                                    if (rewards_spread.length > 0 && $('#incentive_window_graphs').hasClass('hidden')) {
                                        $('#incentive_window_graphs').toggleClass('hidden');
                                    }

                                    $('#table_complete_history').append(html_table);
                                    $('#unconfirmed').text(unconfirmed);
                                    $('#rewards_total').text(rewards_spread.length);
                                });

                            .row-fluid #[span#table_complete_history]
                        .span6
                            .row-fluid
                                div.span1
                                    h4 ADDRESSES
                                div.span11.text-right
                                    form.form-horizontal(id="form_sweep_private_key")
                                        input.span8(id="input_sweep_private_key", type="text", placeholder="Sweep a valid private key")
                                        input.btn(type="submit", id="button_sweep_private_key", value="Sweep")
                                        input.btn.button_margin_left(type='button', id='button_new_address', value='New')
                                        script.
                                            /**
                                             * Disable the button until input is filled
                                             */
                                            $('#button_sweep_private_key').prop('disabled', true);
                                            $('#input_sweep_private_key').keyup(function() {
                                                $('#button_sweep_private_key').prop('disabled', this.value == "" ? true : false);     
                                            });

                                            $('#form_sweep_private_key').on('submit', function(e) {
                                                e.preventDefault();

                                               /**
                                                * Disable the button again to prevent multiple submissions (it takes a few seconds to get a response from the wallet)
                                                */
                                                $('#button_sweep_private_key').prop('disabled', true);

                                                /**
                                                 * Enable the button after 6 seconds, this (should) give enough time for the wallet to respond
                                                 */
                                                setTimeout(function() {
                                                     $('#button_sweep_private_key').prop('disabled', false);
                                                }, 6000);

                                                /**
                                                 * Call RPC method importprivkey on the server
                                                 */
                                                socket.emit('importprivkey', $('#input_sweep_private_key').val());
                                            });

                                    script.
                                        /**
                                         * On "button_new_address" click call RPC method getnewaddress on the server
                                         */
                                        $("#button_new_address").click(function(){
                                            socket.emit('getnewaddress', true);
                                        }); 

                                        /**
                                         * List all wallet addresses including empty ones
                                         */
                                        socket.on('listreceivedbyaddress', function(obj) {
                                            $('#table_wallet_addresses').empty();

                                            var html_table = $('<table class="table table-striped"><thead><tr><th>Address</th><th>Conf.</th><th>Received</th><th></th></tr></thead></table>');
                                            var address = '';
                                            var local_params = local_currency_params(local_currency[0]);

                                            for (key in obj) {
                                                if (obj[key]['confirmations'] > 0) {
                                                    address = '<a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'] + '</a>';
                                                } else {
                                                    address = obj[key]['address'];
                                                }

                                                html_table.append('<tr><td>' + address + '</td><td>' + obj[key]['confirmations'] + '</td><td>' + obj[key]['amount'] + '</td><td>' + accounting.formatMoney(obj[key]['amount'] * local_currency[1] * local_currency[2], local_params['symbol'], 2, local_params['thousand'], local_params['decimal']) + ' ' + local_currency[0] + '</td></tr>');
                                            }

                                            $('#table_wallet_addresses').append(html_table);
                                        });

                            .row-fluid #[span#table_wallet_addresses]
                            .row-fluid
                                .span3
                                    h4 WATCH ADDRESSES
                                .span9.text-right
                                    form.form-horizontal(id="form_add_watch_address")
                                        input.span2(id="input_watch_address_title", type="text", placeholder="Title")
                                        input.span7(id="input_watch_address", type="text", placeholder="A valid address")
                                        input.btn(type="submit", id="button_add_watch_address", value="Add")
                                        input.btn.button_margin_left(type='button', id='button_refresh_watch_addresses', value='Refresh')
                                        script.
                                            /**
                                             * Disable the button until inputs are filled
                                             */
                                            $('#button_add_watch_address').prop('disabled', true);
                                            $('#form_add_watch_address input').keyup(function() {
                                                var inputs_empty = false;

                                                $('#form_add_watch_address input').each(function() {
                                                    if ($(this).val().length == 0) {
                                                        inputs_empty = true;
                                                    }
                                                });

                                                if (inputs_empty) {
                                                    $('#button_add_watch_address').prop('disabled', true);
                                                } else {
                                                    $('#button_add_watch_address').prop('disabled', false);
                                                }
                                            });

                                            /**
                                             * Emit new watch address
                                             */
                                            $('#form_add_watch_address').on('submit', function(e) {
                                                e.preventDefault();
                                                socket.emit('addwatchaddress', [$('#input_watch_address').val(), $('#input_watch_address_title').val()]);
                                            });

                                            /**
                                             * Refresh watch only addresses
                                             */
                                            $('#button_refresh_watch_addresses').click(function() {
                                                socket.emit('refresh_watch_addresses', true);
                                            });
                            script.
                                /**
                                 * List all watch addresses saved in config.json
                                 */
                                socket.on('watchaddresses', function(obj) {
                                    $('#table_watch_addresses').empty();

                                    var html_table = $('<table class="table table-striped"><thead><tr><th>Address</th><th>Title</th><th>Balance</th><th></th></tr></thead></table>');
                                    var local_params = local_currency_params(local_currency[0]);

                                    for (key in obj) {
                                        html_table.append('<tr><td><a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'] + '</a></td><td>' + obj[key]['title'] + '</td><td>' + obj[key]['balance'] + '</td><td>' + accounting.formatMoney(parseFloat(obj[key]['balance']) * local_currency[1] * local_currency[2], local_params['symbol'], 2, local_params['thousand'], local_params['decimal']) + ' ' + local_currency[0] + '</td></tr>');
                                    }

                                    $('#table_watch_addresses').append(html_table);
                                });

                            .row-fluid #[span#table_watch_addresses]
                            .row-fluid
                                .span3
                                    div #[span#qr_code]
                                .span9.text-right
                                    form.form-horizontal(id="form_create_qr_code")
                                        input.span7(id="input_string_to_encode", type="text", placeholder="String to encode")
                                        input.btn(id="button_create_qr_code", type="submit", value="Generate QR code")
                            script.
                                /**
                                 * Disable the button until input is filled
                                 */
                                $('#button_create_qr_code').prop('disabled', true);
                                $('#input_string_to_encode').keyup(function() {
                                    $('#button_create_qr_code').prop('disabled', this.value == "" ? true : false);     
                                });

                                /**
                                 * Emit string used in qr code
                                 */
                                $('#form_create_qr_code').on('submit', function(e) {
                                    e.preventDefault();
                                    socket.emit('qr_code_generate', $('#input_string_to_encode').val());
                                });

                                /**
                                 * Update with new qr code <img /> tag
                                 */
                                socket.on('qr_code_return', function(obj) {
                                    $('#qr_code').empty().append(obj);
                                });

                    .row-fluid
                        .span6
                            h4 LATEST POLONIEX TRADES
                            script.
                                /**
                                 * List last 200 trades from Poloniex
                                 */
                                socket.on('poloniextradehistory', function(obj) {
                                    $('#table_trade_history_poloniex').empty();

                                    var html_table = $('<table class="table table-striped"><thead><tr><th>Date</th><th>Type</th><th>Price</th><th>VNL</th><th>BTC</th></tr></thead></table>');

                                    for (key in obj) {
                                        html_table.append('<tr><td>' + obj[key]['date'] + '</td><td class="' + _.capitalize(obj[key]['type']) + '">' + _.capitalize(obj[key]['type']) + '</td><td>' + obj[key]['rate'] + '</td><td>' + obj[key]['amount'] + '</td><td>' + obj[key]['total'] + '</td></tr>');
                                    }

                                    $('#table_trade_history_poloniex').append(html_table);
                                });

                            .row-fluid.tradehistory #[span#table_trade_history_poloniex]
                        .span6
                            h4 LATEST BITTREX TRADES
                            script.
                                /**
                                 * List last 50 trades from Bittrex
                                 */
                                socket.on('bittrextradehistory', function(obj) {
                                    $('#table_trade_history_bittrex').empty();
                                    var html_table = $('<table class="table table-striped"><thead><tr><th>Date</th><th>Type</th><th>Price</th><th>VNL</th><th>BTC</th></tr></thead></table>');

                                    for (key in obj) {
                                        html_table.append('<tr><td>' + obj[key]['TimeStamp'].replace('T',' ').split('.')[0] + '</td><td class="' + _.capitalize(obj[key]['OrderType'].toLowerCase()) + '">' + _.capitalize(obj[key]['OrderType'].toLowerCase()) + '</td><td>' + obj[key]['Price'].toFixed(8) + '</td><td>' + obj[key]['Quantity'].toFixed(8) + '</td><td>' + obj[key]['Total'].toFixed(8) + '</td></tr>');
                                    }

                                    $('#table_trade_history_bittrex').append(html_table);
                                });

                            .row-fluid.tradehistory #[span#table_trade_history_bittrex]
                #maintenance_window.hidden
                    .row-fluid
                        .span4
                            .row-fluid
                                .span9
                                    h4 Backup wallet
                                .span3.text-right
                                    input.btn.span9(type='button', id='button_backup_wallet', value='Backup')
                                    script.
                                        /**
                                         * On "button_backup_wallet" click call RPC method backupwallet on the server
                                         */
                                        $('#button_backup_wallet').click(function() {
                                            socket.emit('backupwallet', true);
                                            socket.on('backupwallet_done', function() {
                                                $('#backup_wallet_response').text('Wallet has been successfuly backed up in your vanillacoind directory.');
                                            });
                                        });

                            .row-fluid #[span#backup_wallet_response]
                            .row-fluid
                                .span9
                                    h4 Check wallet for inconsistencies
                                .span3.text-right
                                    input.btn.span9(type='button', id='button_check_wallet', value='Check')
                                    script.
                                        /**
                                         * On "button_check_wallet" click call RPC method checkwallet on the server
                                         */
                                        $('#button_check_wallet').click(function() {
                                            socket.emit('checkwallet', true);
                                            socket.on('checkwallet_done', function(obj) {
                                                $('#check_wallet_response').empty();

                                                for (var key in obj) {
                                                    $('#check_wallet_response').append('<p>' + key + ': ' + obj[key] + '</p>');
                                                }
                                            });
                                        });

                            .row-fluid#check_wallet_response
                            .row-fluid
                                .span9
                                    h4 Repair wallet if an inconsistency is found
                                .span3.text-right
                                    input.btn.span9(type='button', id='button_repair_wallet', value='Repair')
                                    script.
                                        /**
                                         * On "button_repair_wallet" click call RPC method repairwallet on the server
                                         */
                                        $('#button_repair_wallet').click(function() {
                                            socket.emit('repairwallet', true);
                                            socket.on('repairwallet_done', function(obj) {
                                                $('#repair_wallet_response').empty();

                                                for (var key in obj) {
                                                    $('#repair_wallet_response').append('<p>' + key + ': ' + obj[key] + '</p>');
                                                }
                                            });
                                        });

                            .row-fluid#repair_wallet_response
                        .span8
                            .row-fluid.text-right
                                form.form-horizontal(id="form_wallet_passphrase_change")
                                    input.span4(id="input_old_passphrase", type="text", placeholder="Old passphrase")
                                    input.span4(id="input_new_passphrase", type="text", placeholder="New passphrase")
                                    input.span2.btn(type="submit", id="button_wallet_passphrase_change", value="Change passphrase")
                                script.
                                    /**
                                     * Disable the button until inputs are filled
                                     */
                                    $('#button_wallet_passphrase_change').prop('disabled', true);
                                    $('#form_wallet_passphrase_change input').keyup(function() {
                                        var inputs_empty = false;

                                        $('#form_wallet_passphrase_change input').each(function() {
                                            if ($(this).val().length == 0) {
                                                inputs_empty = true;
                                            }
                                        });

                                        if (inputs_empty) {
                                            $('#button_wallet_passphrase_change').prop('disabled', true);
                                        } else {
                                            $('#button_wallet_passphrase_change').prop('disabled', false);
                                        }
                                    });

                                    $('#form_wallet_passphrase_change').on('submit', function(e) {
                                        e.preventDefault();

                                        /**
                                         * Call RPC method walletpassphrasechange on the server
                                         */
                                        socket.emit('walletpassphrasechange', [$('#input_old_passphrase').val(), $('#input_new_passphrase').val()]);
                                    });

                            .row-fluid.text-right
                                    form.form-horizontal(id="form_dump_private_key")
                                        input.span4(id="input_dump_private_key", type="text", placeholder="Valid public key from this wallet")
                                        input.span2.btn(type="submit", id="button_dump_private_key", value="Dump private key")
                                    script.
                                        /**
                                         * Disable the button until input is filled
                                         */
                                        $('#button_dump_private_key').prop('disabled', true);
                                        $('#input_dump_private_key').keyup(function() {
                                            $('#button_dump_private_key').prop('disabled', this.value == "" ? true : false);
                                        });

                                        /**
                                         * Allow only backspace, delete, left arrow, right arrow, enter, 1-9 a-zA-Z, numpad 1-9
                                         */
                                        $("#input_dump_private_key").keydown(function(e) {
                                            if (!(e.keyCode == 46 || e.keyCode == 8 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 13 || (e.keyCode >= 49 && e.keyCode <= 90) || (e.keyCode >= 97 && e.keyCode <= 105))) {
                                                e.preventDefault();
                                            }
                                        });

                                        $('#form_dump_private_key').on('submit', function(e) {
                                            e.preventDefault();

                                            /**
                                             * Call RPC method dumpprivkey on the server
                                             */
                                            socket.emit('dumpprivkey', $('#input_dump_private_key').val());
                                        });

                #incentive_window.hidden
                    #incentive_window_graphs.hidden.row-fluid
                        .span6.text-center
                            h4 REWARD SPREAD (#[span#rewards_total])
                            .row-fluid #[span#graph_timeseries]
                        .span6.text-center
                            h4 REWARDS PER DAY
                            .row-fluid #[span#graph_rewards_monthly]
                    .row-fluid
                        .span3
                        .span9.text-right
                            .row-fluid
                                .span9
                                    b #[span#future_block_already_submitted]
                                    #estimate_blocktime.hidden
                                        b Date: 
                                        | #[span#future_block_estimated_time] (#[span#future_block_in]) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                        b Incentive reward: 
                                        | #[span#incentive_reward] (
                                        b #[span#future_block_percentage]
                                        | ) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                        b PoW reward: 
                                        | #[span#pow_reward]
                                .span3
                                    form.form-horizontal(id="form_estimate_blocktime")
                                        input.span4(id="input_estimate_blocktime", type="text", placeholder="Block #")
                                        input.btn(id="button_estimate_blocktime", type="submit", value="Estimate block time")
                                        script.
                                            /**
                                             * Disable the button until input is filled
                                             */
                                            $('#button_estimate_blocktime').prop('disabled', true);
                                            $('#input_estimate_blocktime').keyup(function() {
                                                $('#button_estimate_blocktime').prop('disabled', this.value == "" ? true : false);
                                            });

                                            /**
                                             * Allow only backspace, delete, left arrow, right arrow, enter, 0-9, numpad 0-9
                                             */
                                            $("#input_estimate_blocktime").keydown(function(e) {
                                                if (!(e.keyCode == 46 || e.keyCode == 8 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 13 || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
                                                    e.preventDefault();
                                                }
                                            });

                                            $('#form_estimate_blocktime').on('submit', function(e) {
                                                e.preventDefault();

                                                var time_per_block = 111;
                                                var future_block = parseInt($('#input_estimate_blocktime').val());
                                                var estimate = new Date();

                                                if (future_block - blocks > 0) {
                                                    estimate.setSeconds(estimate.getSeconds() + (future_block - blocks) * time_per_block);

                                                    /**
                                                     * Calculate %
                                                     */
                                                    socket.emit('calculate_percentage', future_block);

                                                    /**
                                                     * Calculate PoW reward (from https://github.com/john-connor/vanillacoin/blob/master/src/reward.cpp)
                                                     */
                                                    subsidy = 128;

                                                    for (i = 50000; i <= future_block; i += 50000) {
                                                        subsidy -= subsidy / 6;
                                                    }

                                                    /**
                                                     * Update text with % and incentive reward (in coins)
                                                     */
                                                    socket.on('return_percentage', function(obj) {
                                                        $('#future_block_percentage').text(obj + '%');
                                                        $('#incentive_reward').text(((subsidy / 100) * obj).toFixed(6));
                                                    });

                                                    if ($('#estimate_blocktime').hasClass('hidden')) {
                                                        $("#estimate_blocktime").toggleClass('hidden');
                                                    }

                                                    /**
                                                     * Update the rest of the text
                                                     */
                                                    $('#pow_reward').text(subsidy.toFixed(6));
                                                    $('#future_block_already_submitted').text('');
                                                    $("#future_block_estimated_time").text(estimate.toLocaleDateString() + ' ' + estimate.toLocaleTimeString());
                                                    $('#future_block_in').text(moment().to(estimate.toISOString()));
                                                } else {
                                                    $('#future_block_already_submitted').text('Block already submitted');

                                                    if (!$('#estimate_blocktime').hasClass('hidden')) {
                                                        $("#estimate_blocktime").toggleClass('hidden');
                                                    }
                                                }
                                            });


                    #peers_header.row-fluid
                        .span2
                            h4 NEIGHBOURING PEERS
                        .span10.text-right
                            script.
                                /**
                                 * Update UDP connections
                                 */
                                socket.on('udp_connections', function(obj) {
                                    $('#udp_connections').text(obj);
                                });

                                /**
                                 * Update with information received from RPC method 'getincentiveinfo'
                                 */
                                socket.on('getincentiveinfo', function(obj) {
                                    /**
                                     * Update #[span#key] elements
                                     */
                                    for (var key in obj) {
                                        if (obj.hasOwnProperty(key)) {
                                            $("#" + key).text(obj[key]);
                                        }
                                    }
                                });

                            b Vote candidate: 
                            | #[span#votecandidate] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            | #[span#ip]
                            b :
                            | #[span#port] (
                            b #[span#networkstatus]
                            | ) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            b TCP: 
                            | #[span#connections]
                            b &nbsp;&nbsp; UDP: 
                            | #[span#udp_connections] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            b Collateral: 
                            | #[span#collateralbalance] / #[span#collateralrequired]
                    #map
                    script.
                        /**
                         * Create new leaflet map
                         */
                        peers_map = new L.Map('map', {
                            center: [43.321153, -28.602914],
                            zoom: 3
                        });

                        /**
                         * Add mapquest tile layer and give proper attributions
                         */
                        L.tileLayer('http://otile4.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png', {
                            attribution: '&copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors. Tiles courtesy of <a href="http://www.mapquest.com/">MapQuest</a>. <img src="http://developer.mapquest.com/content/osm/mq_logo.png">',
                            maxZoom: 18
                        }).addTo(peers_map);

                        var controls_previous = null;
                        var marker_groups_previous = {};
                        var obj_previous = {};

                        /**
                         * Loop through the object and add markers to the map
                         */
                        function addMarkers(obj) {
                            var marker_groups = {};

                            /**
                             * Sort obj by DESC subver for proper controls display
                             */
                            obj.sort(function(a,b) { return a.subver < b.subver });

                            /**
                             * Craete a deep copy of obj so we don't alter it below with deletes
                             */
                            var obj = $.extend(true, [], obj);

                            for (var key in obj) {
                                if (obj[key].hasOwnProperty('lat') && obj[key].hasOwnProperty('lon')) {
                                    /**
                                     * Remove / / from the subver string
                                     */
                                    var version = obj[key]['subver'].replace(/\//g, '');

                                    /**
                                     * Add new subver k,v pair if it doesn't already exist
                                     */
                                    if (!marker_groups.hasOwnProperty(version)) {
                                        marker_groups[version] = [];
                                    }

                                    /**
                                     * Create a marker based on provided lat / lon and add it to the array
                                     */
                                    marker_groups[version].push(new L.marker([obj[key]['lat'], obj[key]['lon']]).bindPopup('<p><b>Country</b>: ' + obj[key]['country'] + '</p><p><b>Address</b>: ' + obj[key]['addr'] + '</p><p><b>Version</b>: ' + version + '</p>'));

                                    /**
                                     * If address is found in previous obj, remove it from the current obj
                                     */
                                    for (var key_o in obj_previous) {
                                        if (obj[key]['addr'] == obj_previous[key_o]['addr']) {
                                            delete obj[key];
                                            break;
                                        }
                                    }
                                }
                            }

                            /**
                             * Length == 0 when all addresses were found in obj_previous
                             */
                            if (Object.keys(obj).length > 0) {
                                /**
                                 * If controls are defined, remove them from the map
                                 */
                                if (controls_previous != null) {
                                    controls_previous.removeFrom(peers_map);
                                }

                                /**
                                 * Clear layers of each group
                                 */
                                for (var key in marker_groups_previous) {
                                    marker_groups_previous[key].clearLayers();
                                }

                                /**
                                 * Convert normal [] into L.layerGroup
                                 */
                                for (key in marker_groups) {
                                    marker_groups[key] = L.layerGroup(marker_groups[key]);
                                }

                                /**
                                 * Add markers and controls to map, set current values
                                 */
                                if (Object.keys(marker_groups).length > 0) {
                                    controls_previous = L.control.layers('', marker_groups).addTo(peers_map);
                                    marker_groups_previous = marker_groups;
                                    obj_previous = obj;
                                }

                                /**
                                 * Ugly hack: Click all checkboxes in control to show markers
                                 */
                                $('.leaflet-control-layers-selector').click();
                            }
                        }

                        /**
                         * List neighbouring peers
                         */
                        socket.on('getpeerinfo', function(obj) {
                            $('#table_getpeerinfo').empty();

                            /**
                             * Pass the object to addMarkers for peers graph population
                             */
                            addMarkers(obj);

                            var html_table = $('<table class="table table-striped"><thead><tr><th>Address</th><th>Country</th><th>Last send</th><th>Last receive</th><th>Connected on</th><th>Protocol</th><th>Version</th><th>Inbound</th><th>Starting height</th><th>Ban score</th></tr></thead></table>');

                            for (key in obj) {
                                /**
                                 * Convert time fields to miliseconds
                                 */
                                var lastsend = new Date(obj[key]['lastsend'] * 1000);
                                    lastsend = lastsend.toLocaleDateString() + ' ' + lastsend.toLocaleTimeString();
                                var lastrecv = new Date(obj[key]['lastrecv'] * 1000);
                                    lastrecv = lastrecv.toLocaleDateString() + ' ' + lastrecv.toLocaleTimeString();
                                var conntime = new Date(obj[key]['conntime'] * 1000);
                                    conntime = conntime.toLocaleDateString() + ' ' + conntime.toLocaleTimeString();

                                /**
                                 * Check if country is set and update accordingly
                                 */
                                if (obj[key].hasOwnProperty('country')) {
                                    var country = obj[key]['country'];
                                } else {
                                    var country = '-----';
                                }

                                html_table.append('<tr><td>' + obj[key]['addr'] + '</td><td>' + country + '</td><td>' + lastsend + '</td><td>' + lastrecv + '</td><td>' + conntime + '</td><td>' + obj[key]['version'] + '</td><td>' + obj[key]['subver'].replace(/\//g, '') + '</td><td>' + obj[key]['inbound'] + '</td><td>' + obj[key]['startingheight'] + '</td><td>' + obj[key]['banscore'] + '/100</td></tr>');
                            }

                            $('#table_getpeerinfo').append(html_table);
                        });

                    .row-fluid
                        .span12
                    .row-fluid #[span#table_getpeerinfo]
                .footer
                    .row-fluid
                        .span12