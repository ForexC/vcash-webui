//
    Copyright (C) 2015 whphhg

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version. For more information read the
    complete license in LICENSE.md.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

extends layout
block content
    script.
        /**
         * Extend native String object with .capitalize() function.
         */
        String.prototype.capitalize = function() {
            return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();
        }

        /**
         * Start socket.io on localhost:20123.
         */
        socket = io('http://localhost:20123');

        /**
         * All alerts are fed through here.
         */
        socket.on('alerts', function(text) {
            alert(text);
        });

        moneysupply = 0;

        /**
         * Update #[span#key] elements with information received from RPC 'getinfo'.
         */
        socket.on('getinfo', function(obj) {
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (key == 'balance') {
                        $('#' + key).text(accounting.formatMoney(obj[key], '', 6, ',', '.'));
                    } else {
                        $('#' + key).text(obj[key]);
                    }
                }
            }

            /**
             * Global variables needed for calculations elsewhere.
             */
            balance = obj['balance'];
            blocks = obj['blocks'];
            moneysupply = obj['moneysupply'];
        });

    .container-fluid
        .row-fluid
            .span1
            .span5
                h3 BALANCE &nbsp;&nbsp; #[span#balance] &nbsp;&nbsp; &#579;#[span#balance_btc] &nbsp;&nbsp; #[span#balance_local]
                p
                    b Unconfirmed
                    | &nbsp;&nbsp; #[span#unconfirmed] &nbsp;&nbsp;
                    b Staking
                    | &nbsp;&nbsp; #[span#stake] &nbsp;&nbsp;
                    b Immature
                    | &nbsp;&nbsp; #[span#newmint]
            .span5.text-right
                h3 &#579;#[span#vnl_btc] &nbsp;&nbsp; #[span#vnl_local] &nbsp;&nbsp #[span#vnl_local_marketcap] MCAP
                p
                    b #[span#version] &nbsp;&nbsp; Protocol: 
                    | #[span#protocolversion]
                    b &nbsp;&nbsp; Wallet: 
                    | #[span#walletversion]
        .row-fluid
            .span1
            .span3
                script.
                    /**
                     * Initial wallet "lock / unlock / encrypt" (passphrase) check.
                     */
                    socket.on('wallet_passphrase_check', function(res) {
                        /**
                         * error_code_wallet_wrong_enc_state = -15, wallet not encrypted.
                         */
                        if (res.code == -15) {
                            $('#wallet_encrypt').toggleClass('hidden');
                        }
                        /**
                         * error_code_invalid_params = -32602, wallet is encrypted and locked (in this case).
                         */
                        else if (res.code == -32602) {
                            $('#wallet_lock').addClass('hidden');
                            $('#wallet_unlock').toggleClass('hidden');
                            $('#sweep_this_private_key').prop('disabled', true);
                            $('#transfer_amount').prop('disabled', true);
                            $('#transfer_recipient').prop('disabled', true);
                            $('#button_transfer').prop('disabled', true);
                            $('#button_sweep').prop('disabled', true);
                        }
                        /**
                         * error_code_wallet_already_unlocked = -17, wallet unlocked.
                         */
                        else if (res.code == -17) {
                            $('#wallet_unlock').addClass('hidden');
                            $('#wallet_lock').toggleClass('hidden');
                            $('#sweep_this_private_key').prop('disabled', false);
                            $('#transfer_amount').prop('disabled', false);
                            $('#transfer_recipient').prop('disabled', false);
                        }
                    });

                .hidden#wallet_encrypt
                    form.form-horizontal(id="form_wallet_encrypt")
                        input.span9(id="encrypt_key", type="text", placeholder="Wallet is unencrypted")
                        input.btn(type="submit", id="button_encrypt", value="Encrypt")
                        script.
                            /**
                             * Disable the button until input is filled.
                             */
                            $('#button_encrypt').prop('disabled', true);
                            $('#encrypt_key').keyup(function() {
                                $('#button_encrypt').prop('disabled', this.value == "" ? true : false);     
                            });

                            /**
                             * Emit key on form submit.
                             */
                            $('#form_wallet_encrypt').on('submit', function(e) {
                                e.preventDefault();
                                socket.emit('encryptwallet', $('#encrypt_key').val());
                                $('#wallet_encrypt').toggleClass('hidden');
                            });

                .hidden#wallet_unlock
                    form.form-horizontal(id="form_wallet_unlock")
                        input.span9(id="unlock_key", type="text", placeholder="Wallet is locked")
                        input.btn(type="submit", id="button_unlock", value="Unlock")
                        script.
                            /**
                             * Disable the button until input is filled.
                             */
                            $('#button_unlock').prop('disabled', true);
                            $('#unlock_key').keyup(function() {
                                $('#button_unlock').prop('disabled', this.value == "" ? true : false);     
                            });

                            /**
                             * Emit key on form submit.
                             */
                            $('#form_wallet_unlock').on('submit', function(e) {
                                e.preventDefault();
                                socket.emit('walletpassphrase', $('#unlock_key').val());
                            });

                .hidden#wallet_lock
                    input.span9.btn(type='submit', id='button_lock', value='Lock the wallet')
                    script.
                        /**
                         * On "button_lock" click call RPC method walletlock on the server.
                         */
                        $("#button_lock").click(function(){
                            socket.emit('walletlock', true);
                        });
            .span4.text-center
                input.btn(type='submit', id='button_node_incentives', value='Incentive info')
                script.
                    /**
                     * Show node incentive info on "button_node_incentives" click.
                     */
                    $("#button_node_incentives").click(function() {
                        /**
                         * Handle clicks between "Complete history" and "Incentive info" buttons to correctly hide and show wallet "windows".
                         */
                        if (!$("#history_window").hasClass('hidden')) {
                            if ($("#wallet_window").hasClass('hidden') && $("#incentive_window").hasClass('hidden')) {
                                $("#history_window").addClass('hidden');
                                $("#incentive_window").toggleClass('hidden');
                            }
                        } else {
                            $("#incentive_window").toggleClass('hidden');
                            $("#wallet_window").toggleClass('hidden');
                        }
                    });

                input.btn(type='submit', id='button_complete_history', class="button_margin_left", value='Maintenance')
                script.
                    /**
                     * Show complete history on "button_complete_history" click.
                     */
                    $("#button_complete_history").click(function() {
                        /**
                         * Handle clicks between "Complete history" and "Incentive info" buttons to correctly hide and show wallet "windows".
                         */
                        if (!$("#incentive_window").hasClass('hidden')) {
                            if ($("#wallet_window").hasClass('hidden') && $("#history_window").hasClass('hidden')) {
                                $("#incentive_window").addClass('hidden');
                                $("#history_window").toggleClass('hidden');
                            }
                        } else {
                            $("#history_window").toggleClass('hidden');
                            $("#wallet_window").toggleClass('hidden');
                        }
                    });
            .span3.text-right
                form.form-horizontal(id="form_select_currency")
                    script.
                        /**
                         * Populate local currency dropdown selection menu.
                         */
                        socket.on('fixerio', function(obj) {
                            var html_select = $('<select id="selected_local_currency" class="span3" />');
                            for (var key in obj) {
                                if (obj.hasOwnProperty(key)) {
                                    $('<option />', {value: obj[key]['name'], text: obj[key]['name']}).appendTo(html_select);
                                }
                            }
                            html_select.appendTo('#form_select_currency');
                            $('<input type="submit" value="Set" class="btn">').appendTo('#form_select_currency');
                        });

                        /**
                         * Emit new currency to server.
                         */
                        $('#form_select_currency').on('submit', function(e) {
                            e.preventDefault();
                            socket.emit('set_local_currency', $('#selected_local_currency').val());
                        });

                        /**
                         * Return currency local properties.
                         *
                         * TODO: Finish local decimal/thousand separators for all currencies.
                         */
                        function local_currency_params(currency) {
                            var local_symbol = '';
                            var local_decimal = '.';
                            var local_thousand = ',';

                            if (currency == 'AUD' || currency == 'CAD' || currency == 'HKD' || currency == 'NZD' || currency == 'SGD' || currency == 'USD') {
                                local_symbol = '$';
                            } else if (currency == 'CNY') {
                                local_symbol = '元';
                            } else if (currency == 'GBP') {
                                local_symbol = '£';
                            } else if (currency == 'ILS') {
                                local_symbol = '₪';
                            } else if (currency == 'INR') {
                                local_symbol = '₹';
                            } else if (currency == 'JPY') {
                                local_symbol = '¥';
                            } else if (currency == 'KRW') {
                                local_symbol = '₩';
                            } else if (currency == 'MXN' || currency == 'PHP') {
                                local_symbol = '₱';
                            } else if (currency == 'THB') {
                                local_symbol = '฿';
                            } else if (currency == 'TRY') {
                                local_symbol = '₤';
                            } else if (currency == 'EUR') {
                                local_symbol = '€';
                                local_decimal = ',';
                                local_thousand = '.';
                            }

                            return {"symbol":local_symbol, "decimal":local_decimal, "thousand":local_thousand};
                        }

                        local_currency = ['',0,0];

                        socket.on('local_currency', function(obj) {
                            var currency = obj[0];
                            var btc_price = obj[1];
                            var vnl_average = obj[2];
                            var local_params = local_currency_params(currency);

                            /**
                             * Global var for local currency calculations elsewhere
                             */
                            local_currency = obj;

                            /**
                             * Update #[span#key] elements.
                             */
                            $('#vnl_btc').text(accounting.formatMoney(vnl_average, '', 8, ',', '.'));
                            $('#vnl_local').text(accounting.formatMoney(vnl_average * btc_price, local_params['symbol'], 3, local_params['thousand'], local_params['decimal']) + ' ' + currency);
                            $('#vnl_local_marketcap').text(accounting.formatMoney(vnl_average * moneysupply * btc_price, local_params['symbol'], 0, local_params['thousand'], local_params['decimal']) + ' ' + currency);
                            $('#balance_btc').text(accounting.formatMoney(vnl_average * balance, '', 8, ',', '.'));
                            $('#balance_local').text(accounting.formatMoney(vnl_average * balance * btc_price, local_params['symbol'], 2, local_params['thousand'], local_params['decimal']) + ' ' + currency);
                        });

        .row-fluid
            .span1
            .span10
                hr
        #wallet_window
            .row-fluid
                .span1
                .span5
                    .row-fluid
                        .span2
                            h4 TRANSACTIONS
                        .span10.text-right
                            form.form-horizontal(id="form_transfer")
                                input.span2(id="transfer_amount", type="text", placeholder="Amount")
                                input.span6(id="transfer_recipient", type="text", placeholder="A valid address")
                                input.btn(type="submit", id="button_transfer", value="Send")
                                input.btn(type="button", id="button_transfer_add_recipient", class="button_margin_left", value="+")
                            script.
                                /**
                                 * Disable the button until inputs are filled.
                                 */
                                $('#button_transfer').prop('disabled', true);
                                $('#form_transfer input').keyup(function() {
                                    var inputs_empty = false;

                                    $('#form_transfer input').each(function() {
                                        if ($(this).val().length == 0) {
                                            inputs_empty = true;
                                        }
                                    });

                                    if (inputs_empty) {
                                        $('#button_transfer').prop('disabled', true);
                                    } else {
                                        $('#button_transfer').prop('disabled', false);
                                    }
                                });

                                /**
                                 * Emit new watch address.
                                 */
                                $('#form_transfer').on('submit', function(e) {
                                    e.preventDefault();
                                    socket.emit('validateaddress', [$('#transfer_recipient').val(), $('#transfer_amount').val()]);
                                });

                                /**
                                 * If valid ask user to confirm transfer and then sendtoaddress, else do nothing.
                                 */
                                socket.on('transfer_possible', function(obj) {
                                    var address = obj[0];
                                    var amount = obj[1]

                                    if (confirm("Recipient: " + address + "\nAmount: " + amount + "\n\nAre you sure you want to transfer the coins?") == true) {
                                        socket.emit('sendtoaddress', [address, amount]);
                                    }
                                });
                    script.
                        /**
                         * List complete history.
                         */
                        socket.on('listsinceblock', function(obj) {
                            $('#table_complete_history').empty();
                            var html_table = $('<table class="table table-striped"><thead><tr><th>Time</th><th>Address</th><th>Category</th><th>Amount</th><th></th><th>Conf.</th><th>Block hash</th><th>txid</th></tr></thead></table>');
                            var unconfirmed = 0;
                            var local_params = local_currency_params(local_currency[0]);

                            for (key in obj) {
                                /**
                                 * Check if tx has been included in a block.
                                 */
                                if (obj[key].hasOwnProperty('blockhash')) {
                                    blockhash = '<a href="https://blockchain.vanillacoin.net/block/' + obj[key]['blockhash'] + '" target="_blank">' + obj[key]['blockhash'].substring(0, 10) + '</a>';

                                    /**
                                     * If it's zerotime.. :)
                                     */
                                    if (obj[key]['blockhash'] == "0000000000000000000000000000000000000000000000000000000000000000") {
                                        blockhash = '----------';
                                    }
                                } else {
                                    blockhash = '----------';
                                }

                                /**
                                 * Count all unconfirmed transactions.
                                 */
                                if (obj[key]['confirmations'] == 0 && obj[key]['amount'] > 0 ) {
                                    unconfirmed += obj[key]['amount'];
                                }

                                /**
                                 * Convert ['timereceived'] to miliseconds.
                                 */
                                var timereceived = new Date(obj[key]['timereceived'] * 1000);

                                html_table.append('<tr><td>' + timereceived.toLocaleDateString() + ' ' + timereceived.toLocaleTimeString() + '</td><td><a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'].substring(0,10) + '</a></td><td>' + obj[key]['category'] + '</td><td>' + obj[key]['amount'] + '</td><td>' + accounting.formatMoney(obj[key]['amount'] * local_currency[1] * local_currency[2], local_params['symbol'], 2, local_params['thousand'], local_params['decimal']) + ' ' + local_currency[0] + '</td><td>' + obj[key]['confirmations'] + '</td><td>' + blockhash + '</td><td><a href="https://blockchain.vanillacoin.net/tx/' + obj[key]['txid'] + '" target="_blank">' + obj[key]['txid'].substring(0, 5) + '</a></td></tr>');
                            }

                            $('#table_complete_history').append(html_table);
                            $('#unconfirmed').text(unconfirmed);
                        });

                    .row-fluid #[span#table_complete_history]
                .span5
                    .row-fluid
                        div.span1
                            h4 ADDRESSES
                        div.span11.text-right
                            form.form-horizontal(id="form_sweep_private_key")
                                input.span8(id="sweep_this_private_key", type="text", placeholder="Sweep a valid private key")
                                input.btn(type="submit", id="button_sweep", value="Sweep")
                                input.btn(type='button', id='button_new_address', class="button_margin_left", value='New')

                                script.
                                    /**
                                     * Disable the button until input is filled.
                                     */
                                    $('#button_sweep').prop('disabled', true);
                                    $('#sweep_this_private_key').keyup(function() {
                                        $('#button_sweep').prop('disabled', this.value == "" ? true : false);     
                                    });

                                    /**
                                     * Emit "sweep_this_private_key" on submit.
                                     */
                                    $('#form_sweep_private_key').on('submit', function(e) {
                                        e.preventDefault();

                                       /**
                                        * Disable the button again to prevent multiple submissions (it takes a few seconds to get a response from the wallet).
                                        */
                                        $('#button_sweep').prop('disabled', true);

                                        /**
                                         * Enable the button after 6 seconds, this (should) give enough time for the wallet to respond.
                                         */
                                        setTimeout(function() {
                                             $('#button_sweep').prop('disabled', false);
                                        }, 6000);

                                        /**
                                         * Call RPC method importprivkey on the server.
                                         */
                                        socket.emit('importprivkey', $('#sweep_this_private_key').val());
                                    });

                            
                            script.
                                /**
                                 * On "button_new_address" click call RPC method getnewaddress on the server.
                                 */
                                $("#button_new_address").click(function(){
                                    socket.emit('getnewaddress', true);
                                }); 

                                /**
                                 * List all wallet addresses including empty ones.
                                 */
                                socket.on('listreceivedbyaddress', function(obj) {
                                    $('#table_wallet_addresses').empty();

                                    var html_table = $('<table class="table table-striped"><thead><tr><th>Address</th><th>Conf.</th><th>Received</th><th></th></tr></thead></table>');
                                    var address = '';
                                    var local_params = local_currency_params(local_currency[0]);

                                    for (key in obj) {
                                        if (obj[key]['confirmations'] > 0) {
                                            address = '<a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'] + '</a>';
                                        } else {
                                            address = obj[key]['address'];
                                        }

                                        html_table.append('<tr><td>' + address + '</td><td>' + obj[key]['confirmations'] + '</td><td>' + obj[key]['amount'] + '</td><td>' + accounting.formatMoney(obj[key]['amount'] * local_currency[1] * local_currency[2], local_params['symbol'], 2, local_params['thousand'], local_params['decimal']) + ' ' + local_currency[0] + '</td></tr>');
                                    }

                                    $('#table_wallet_addresses').append(html_table);
                                });

                    .row-fluid #[span#table_wallet_addresses]
                    .row-fluid
                        .span3
                            h4 WATCH ADDRESSES
                        .span9.text-right
                            form.form-horizontal(id="form_add_watch_address")
                                input.span2(id="watch_address_title", type="text", placeholder="Title")
                                input.span7(id="watch_address", type="text", placeholder="A valid address")
                                input.btn(type="submit", id="button_add_watch_address", value="Add")
                                input.btn(type='button', id='button_refresh_watch_addresses', class="button_margin_left", value='Refresh')
                                script.
                                    /**
                                     * Disable the button until inputs are filled.
                                     */
                                    $('#button_add_watch_address').prop('disabled', true);
                                    $('#form_add_watch_address input').keyup(function() {
                                        var inputs_empty = false;

                                        $('#form_add_watch_address input').each(function() {
                                            if ($(this).val().length == 0) {
                                                inputs_empty = true;
                                            }
                                        });

                                        if (inputs_empty) {
                                            $('#button_add_watch_address').prop('disabled', true);
                                        } else {
                                            $('#button_add_watch_address').prop('disabled', false);
                                        }
                                    });

                                    /**
                                     * Emit new watch address.
                                     */
                                    $('#form_add_watch_address').on('submit', function(e) {
                                        e.preventDefault();
                                        socket.emit('addwatchaddress', [$('#watch_address').val(), $('#watch_address_title').val()]);
                                    });

                                    /**
                                     * Refresh watch only addresses
                                     */
                                    $('#button_refresh_watch_addresses').click(function() {
                                        socket.emit('refresh_watch_addresses', true);
                                    });
                    script.
                        /**
                         * List all watch addresses saved in config.json.
                         */
                        socket.on('watchaddresses', function(obj) {
                            $('#table_watch_addresses').empty();

                            var html_table = $('<table class="table table-striped"><thead><tr><th>Address</th><th>Title</th><th>Balance</th><th></th></tr></thead></table>');
                            var local_params = local_currency_params(local_currency[0]);

                            for (key in obj) {
                                html_table.append('<tr><td><a href="https://blockchain.vanillacoin.net/address/' + obj[key]['address'] + '" target="_blank">' + obj[key]['address'] + '</a></td><td>' + obj[key]['title'] + '</td><td>' + obj[key]['balance'] + '</td><td>' + accounting.formatMoney(parseFloat(obj[key]['balance']) * local_currency[1] * local_currency[2], local_params['symbol'], 2, local_params['thousand'], local_params['decimal']) + ' ' + local_currency[0] + '</td></tr>');
                            }

                            $('#table_watch_addresses').append(html_table);
                        });

                    .row-fluid #[span#table_watch_addresses]                            
            .row-fluid
                .span1
                .span5
                    h4 LATEST POLONIEX TRADES
                    script.
                        /**
                         * List last 200 trades from Poloniex.
                         */
                        socket.on('poloniextradehistory', function(obj) {
                            $('#trade_history_poloniex').empty();

                            var html_table = $('<table class="table table-striped"><thead><tr><th>Date</th><th>Type</th><th>Price (BTC)</th><th>Amount (VNL)</th><th>Total (BTC)</th></tr></thead></table>');

                            for (key in obj) {
                                html_table.append('<tr><td>' + obj[key]['date'] + '</td><td class="' + obj[key]['type'].capitalize() + '">' + obj[key]['type'].capitalize() + '</td><td>' + obj[key]['rate'] + '</td><td>' + obj[key]['amount'] + '</td><td>' + obj[key]['total'] + '</td></tr>');
                            }

                            $('#trade_history_poloniex').append(html_table);
                        });

                    .row-fluid.tradehistory #[span#trade_history_poloniex]
                .span5
                    h4 LATEST BITTREX TRADES
                    script.
                        /**
                         * List last 50 trades from Bittrex.
                         */
                        socket.on('bittrextradehistory', function(obj) {
                            $('#trade_history_bittrex').empty();
                            var html_table = $('<table class="table table-striped"><thead><tr><th>Date</th><th>Type</th><th>Price (BTC)</th><th>Amount (VNL)</th><th>Total (BTC)</th></tr></thead></table>');

                            for (key in obj) {
                                html_table.append('<tr><td>' + obj[key]['TimeStamp'].replace('T',' ').split('.')[0] + '</td><td class="' + obj[key]['OrderType'].capitalize() + '">' + obj[key]['OrderType'].capitalize() + '</td><td>' + obj[key]['Price'].toFixed(8) + '</td><td>' + obj[key]['Quantity'].toFixed(8) + '</td><td>' + obj[key]['Total'].toFixed(8) + '</td></tr>');
                            }

                            $('#trade_history_bittrex').append(html_table);
                        });

                    .row-fluid.tradehistory #[span#trade_history_bittrex]
        #history_window.hidden
            div.container-fluid

        #incentive_window.hidden
            .row-fluid
                .span1
                .span2
                    script.
                        /**
                         * Update UDP connections.
                         */
                        socket.on('udp_connections', function(obj) {
                            $('#udp_connections').text(obj);
                        });

                        /**
                         * Update with information received from RPC method 'getincentiveinfo'.
                         */
                        socket.on('getincentiveinfo', function(obj) {
                            /**
                             * Update #[span#key] elements.
                             */
                            for (var key in obj) {
                                if (obj.hasOwnProperty(key)) {
                                    $("#" + key).text(obj[key]);
                                }
                            }
                        });

                    h4 VOTE CANDIDATE: #[span#votecandidate]
                    p #[span#ip]
                        b :
                        | #[span#port] (
                        b #[span#networkstatus]
                        | )
                    p
                        b TCP: 
                        | #[span#connections]
                        b &nbsp;&nbsp; UDP: 
                        | #[span#udp_connections]
                    p
                        b Collateral: 
                        | #[span#collateralbalance] / #[span#collateralrequired]

                    p
                        b Vote score: 
                        | #[span#votescore]
                    hr
                    h4 TODO: SHOW LATEST REWARDS
                .span6
                    h4 TODO: GRAPH LATEST REWARDS
                    hr
                    .row-fluid
                        .span6
                            .row-fluid
                                .span6
                                    h4 ESTIMATE BLOCK TIME
                                .span6.text-right
                                    form.form-horizontal(id="form_estimate_blocktime")
                                        input.span5(id="block_number", type="text", placeholder="Block #")
                                        input.btn(type="submit", value="Calculate")
                                        script.

                                            $('#form_estimate_blocktime').on('submit', function(e) {
                                                e.preventDefault();

                                                var time_per_block = 111;
                                                var future_block = parseInt($('#block_number').val());
                                                var estimate = new Date();

                                                if (future_block - blocks > 0) {
                                                    estimate.setSeconds(estimate.getSeconds() + (future_block - blocks) * time_per_block);

                                                    /**
                                                     * Calculate %.
                                                     */
                                                    socket.emit('calculate_percentage', future_block);

                                                    /**
                                                     * Calculate PoW reward (from https://github.com/john-connor/vanillacoin/blob/master/src/reward.cpp)
                                                     */
                                                    subsidy = 128;

                                                    for (i = 50000; i <= future_block; i += 50000) {
                                                        subsidy -= subsidy / 6;
                                                    }

                                                    /**
                                                     * Update text with % and incentive reward (in coins).
                                                     */
                                                    socket.on('return_percentage', function(obj) {
                                                        $('#future_block_percentage').text(obj + '%');
                                                        $('#incentive_reward').text(((subsidy / 100) * obj).toFixed(6));
                                                    });

                                                    if ($('#estimate_blocktime').hasClass('hidden')) {
                                                        $("#estimate_blocktime").toggleClass('hidden');
                                                    }

                                                    $('#pow_reward').text(subsidy.toFixed(6));
                                                    $('#future_block_already_submitted').text('');
                                                    $("#future_block").text(future_block);
                                                    $("#future_block_estimated_time").text(estimate.toLocaleDateString() + ' ' + estimate.toLocaleTimeString());
                                                } else {
                                                    $('#future_block_already_submitted').text('BLOCK ALREADY SUBMITTED');

                                                    if (!$('#estimate_blocktime').hasClass('hidden')) {
                                                        $("#estimate_blocktime").toggleClass('hidden');
                                                    }
                                                }
                                            });

                                #[span#future_block_already_submitted]

                                #estimate_blocktime.hidden
                                    .row-fluid
                                        .span5
                                            p
                                                b Block: 
                                                | #[span#future_block]
                                            p
                                                b PoW reward: 
                                                | #[span#pow_reward]
                                        .span7
                                            p
                                                b Date: 
                                                | #[span#future_block_estimated_time]
                                            p
                                                b Incentive reward: 
                                                | #[span#incentive_reward] (
                                                b #[span#future_block_percentage]
                                                | )

                        .span6
                            .row-fluid
                                .span6
                                    h4 CONVERT CURRENCIES
                                .span6.text-right
                                    form.form-horizontal(id="form_convert_currency")
                                        input.span5(id="convert_amount", type="text")
                                script.
                                    $('#form_convert_currency').on('submit', function(e) {
                                        e.preventDefault();
                                    });

                                    var html_select = $('<select id="selected_converting_currency" class="span5" />');
                                                      $('<option />', {value: 'VNL', text: 'VNL'}).appendTo(html_select);
                                                      $('<option />', {value: 'BTC', text: 'BTC'}).appendTo(html_select);
                                                      $('<option />', {value: 'LOCAL', text: 'LOCAL'}).appendTo(html_select);
                                        html_select.appendTo('#form_convert_currency');

                                    /**
                                     * Calculate and update values during input
                                     */
                                    $('#convert_amount').keyup(function() {
                                        if ($('#convert_currency').hasClass('hidden')) {
                                            $("#convert_currency").toggleClass('hidden');
                                        }

                                        var local_params = local_currency_params(local_currency[0]);

                                        /**
                                         * Hide conversion info on currency switch and clear input field
                                         */
                                        $('#selected_converting_currency').change(function() {
                                            if (!$('#convert_currency').hasClass('hidden')) {
                                                $("#convert_currency").toggleClass('hidden');
                                            }

                                            $('#convert_amount').val('');
                                        });

                                        if ($('#selected_converting_currency').val() == 'VNL') {
                                            /**
                                             * Update convert from values
                                             */
                                            $('#convert_from').text($('#convert_amount').val());
                                            $('#convert_from_name').text('VNL');

                                            /**
                                             * Update convert to BTC values
                                             */
                                            $('#convert_to_left').text(accounting.formatMoney($('#convert_amount').val() * local_currency[2], 'Ƀ', 8, ',', '.'));
                                            $('#convert_to_left_name').text('BTC');

                                            /**
                                             * Update convert to LOCAL values
                                             */
                                            $('#convert_to_right').text(accounting.formatMoney($('#convert_amount').val() * local_currency[1] * local_currency[2], local_params['symbol'], 2, local_params['thousand'], local_params['decimal']));
                                            $('#convert_to_right_name').text(local_currency[0]);
                                        } else if ($('#selected_converting_currency').val() == 'BTC') {
                                            /**
                                             * Update convert from values
                                             */
                                            $('#convert_from').text('Ƀ' + $('#convert_amount').val());
                                            $('#convert_from_name').text('BTC');

                                            /**
                                             * Update convert to VNL values
                                             */
                                            $('#convert_to_left').text(accounting.formatMoney($('#convert_amount').val() / local_currency[2], '', 6, ',', '.'));
                                            $('#convert_to_left_name').text('VNL');

                                            /**
                                             * Update convert to LOCAL values
                                             */
                                            $('#convert_to_right').text(accounting.formatMoney($('#convert_amount').val() * local_currency[1], local_params['symbol'], 2, local_params['thousand'], local_params['decimal']));
                                            $('#convert_to_right_name').text(local_currency[0]);
                                        } else {
                                            /**
                                             * Update convert from values
                                             */
                                            $('#convert_from').text(accounting.formatMoney($('#convert_amount').val(), local_params['symbol'], 2, local_params['thousand'], local_params['decimal']));
                                            $('#convert_from_name').text(local_currency[0]);

                                            /**
                                             * Update convert to VNL values
                                             */
                                            $('#convert_to_left').text(accounting.formatMoney((1 / local_currency[1] * $('#convert_amount').val()) / local_currency[2], '', 6, ',', '.'));
                                            $('#convert_to_left_name').text('VNL');

                                            /**
                                             * Update convert to BTC values
                                             */
                                            $('#convert_to_right').text(accounting.formatMoney(1 / local_currency[1] * $('#convert_amount').val(), 'Ƀ', 8, ',', '.'));
                                            $('#convert_to_right_name').text('BTC');
                                        }
                                    });

                                #convert_currency.hidden
                                    p
                                        b #[span#convert_from]
                                        |  #[span#convert_from_name]
                                    .row-fluid
                                        .span5
                                            p
                                                b #[span#convert_to_left]
                                                |  #[span#convert_to_left_name]
                                        .span7
                                            p
                                                b #[span#convert_to_right]
                                                |  #[span#convert_to_right_name]
                .span2
                    script.
                        /**
                         * Get incentive percentages
                         */
                        socket.on('incentive_percentages', function(obj) {
                            $('#incentive_percentages').empty();
                            var html_table = $('<table class="table table-striped"><thead><tr><th>From block</th><th>Up to block</th><th>Reward</th></tr></thead></table>');

                            for (key in obj) {
                                if (obj[parseInt(key)+1] != undefined) {
                                    var block_number = obj[parseInt(key)+1]['block_height'];
                                } else {
                                    var block_number = '----------';
                                }

                                html_table.append('<tr><td>' + obj[key]['block_height'] +'</td><td>' + block_number + '</td><td>' + obj[key]['percentage'] + '%</td></tr>');
                            }

                            $('#incentive_percentages').append(html_table);
                        });

                    h4.text-right CURRENT BLOCK: #[span#blocks]
                    .row-fluid #[span#incentive_percentages]
